
DC_testing_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b0  080059b0  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b8  080059b8  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b8  080059b8  000069b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059c0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          0000029c  20000018  20000018  00007018  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200002b4  200002b4  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb98  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268d  00000000  00000000  00015bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00018270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aab  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002294e  00000000  00000000  00019afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011732  00000000  00000000  0003c449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd98b  00000000  00000000  0004db7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003918  00000000  00000000  0011b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0011ee64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005948 	.word	0x08005948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005948 	.word	0x08005948

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <KalmanFilter_Init>:
#include "kalman_filter.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float P, float X){
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6178      	str	r0, [r7, #20]
 8000d78:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000d80:	ed87 1a02 	vstr	s2, [r7, #8]
 8000d84:	edc7 1a01 	vstr	s3, [r7, #4]
	kf->Q =Q;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	601a      	str	r2, [r3, #0]
	kf->R =R;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	605a      	str	r2, [r3, #4]
	kf->P =P;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	609a      	str	r2, [r3, #8]
	kf->X =X;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	60da      	str	r2, [r3, #12]
}
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <KalmanFilter_Update>:
float KalmanFilter_Update(KalmanFilter *kf, float measurement){
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	ed87 0a00 	vstr	s0, [r7]
	  kf->P += kf->Q;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edd3 7a00 	vldr	s15, [r3]
 8000dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	edc3 7a02 	vstr	s15, [r3, #8]
	  float K = kf->P / (kf->P + kf->R);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de8:	edc7 7a03 	vstr	s15, [r7, #12]
	  kf->X += K * (measurement - kf->X);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	ed93 7a03 	vldr	s14, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000df8:	edd7 6a00 	vldr	s13, [r7]
 8000dfc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	edc3 7a03 	vstr	s15, [r3, #12]
	  kf->P *= (1 - K);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edc3 7a02 	vstr	s15, [r3, #8]
	  return kf->X;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	ee07 3a90 	vmov	s15, r3
}
 8000e36:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <sendDataUART>:
		ITM_SendChar((*ptr++));
	return len;
}

void sendDataUART(float output, float input)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e4e:	edc7 0a00 	vstr	s1, [r7]
	uint8_t buffer_transmit[10];
	buffer_transmit[0] = 0x7E;    // Start byte
 8000e52:	237e      	movs	r3, #126	@ 0x7e
 8000e54:	733b      	strb	r3, [r7, #12]
	memcpy(&buffer_transmit[1], &input, sizeof(float));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8c7 300d 	str.w	r3, [r7, #13]
    memcpy(&buffer_transmit[5], &output, sizeof(float));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f8c7 3011 	str.w	r3, [r7, #17]
    buffer_transmit[9] = 0x33;    // End byte
 8000e62:	2333      	movs	r3, #51	@ 0x33
 8000e64:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, buffer_transmit, sizeof(buffer_transmit), 1000);
 8000e66:	f107 010c 	add.w	r1, r7, #12
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	220a      	movs	r2, #10
 8000e70:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <sendDataUART+0x3c>)
 8000e72:	f003 fcfd 	bl	8004870 <HAL_UART_Transmit>

}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000010c 	.word	0x2000010c

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f001 fabf 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f8b1 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f000 fa5d 	bl	8001350 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e96:	f000 f967 	bl	8001168 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e9a:	f000 f915 	bl	80010c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e9e:	f000 f9b7 	bl	8001210 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ea2:	f000 fa2b 	bl	80012fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	483e      	ldr	r0, [pc, #248]	@ (8000fa4 <main+0x120>)
 8000eac:	f001 fe60 	bl	8002b70 <HAL_GPIO_WritePin>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	483d      	ldr	r0, [pc, #244]	@ (8000fa8 <main+0x124>)
 8000eb4:	f002 fdb0 	bl	8003a18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000eb8:	2104      	movs	r1, #4
 8000eba:	483b      	ldr	r0, [pc, #236]	@ (8000fa8 <main+0x124>)
 8000ebc:	f002 fdac 	bl	8003a18 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	483a      	ldr	r0, [pc, #232]	@ (8000fac <main+0x128>)
 8000ec4:	f002 fc3a 	bl	800373c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ec8:	4839      	ldr	r0, [pc, #228]	@ (8000fb0 <main+0x12c>)
 8000eca:	f002 fb6d 	bl	80035a8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, buffer_receive, sizeof(buffer_receive));
 8000ece:	220a      	movs	r2, #10
 8000ed0:	4938      	ldr	r1, [pc, #224]	@ (8000fb4 <main+0x130>)
 8000ed2:	4839      	ldr	r0, [pc, #228]	@ (8000fb8 <main+0x134>)
 8000ed4:	f003 fd57 	bl	8004986 <HAL_UART_Receive_IT>
// Connect ENB into PC6 if you want to modify duty cycle

  //PID controller
//  PID_Init(&pid, 0.016352, 40, 33.33, 2500, 999);
//  PID_Init(&pid, 1, 40, 33.33, 2500, 999);
  PID_Init(&pid, 10, 0.0001, 0, 2500, 999);
 8000ed8:	ed9f 2a38 	vldr	s4, [pc, #224]	@ 8000fbc <main+0x138>
 8000edc:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8000fc0 <main+0x13c>
 8000ee0:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8000fc4 <main+0x140>
 8000ee4:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8000fc8 <main+0x144>
 8000ee8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000eec:	4837      	ldr	r0, [pc, #220]	@ (8000fcc <main+0x148>)
 8000eee:	f000 fcbf 	bl	8001870 <PID_Init>
  KalmanFilter_Init(&vel_filter, 0.1, 7.0, 1.0, 0.0f);
 8000ef2:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8000fc4 <main+0x140>
 8000ef6:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000efa:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8000efe:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8000fd0 <main+0x14c>
 8000f02:	4834      	ldr	r0, [pc, #208]	@ (8000fd4 <main+0x150>)
 8000f04:	f7ff ff34 	bl	8000d70 <KalmanFilter_Init>
  RLS_Init(&estimator, 0.8f, (float[]){-1.0f, 1.0f, 1.0f, 1.0f}, 1e2f);
 8000f08:	4b33      	ldr	r3, [pc, #204]	@ (8000fd8 <main+0x154>)
 8000f0a:	f107 0408 	add.w	r4, r7, #8
 8000f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8000fdc <main+0x158>
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000fe0 <main+0x15c>
 8000f22:	4830      	ldr	r0, [pc, #192]	@ (8000fe4 <main+0x160>)
 8000f24:	f000 fd88 	bl	8001a38 <RLS_Init>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 	volatile float estimsteIn = (float)pid.output;
 8000f28:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <main+0x148>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	607b      	str	r3, [r7, #4]
	  		volatile float estimsteOut = (float)motor_omega;
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe8 <main+0x164>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd34 	bl	80009a4 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	603b      	str	r3, [r7, #0]
	  		RLS_Update(&estimator, estimsteIn, estimsteOut);
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	ed97 7a00 	vldr	s14, [r7]
 8000f48:	eef0 0a47 	vmov.f32	s1, s14
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	4824      	ldr	r0, [pc, #144]	@ (8000fe4 <main+0x160>)
 8000f52:	f000 fdd5 	bl	8001b00 <RLS_Update>
	  		a[0] = estimator.Theta_.pData[0];
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <main+0x160>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <main+0x168>)
 8000f5e:	6013      	str	r3, [r2, #0]
	  		a[1] = estimator.Theta_.pData[1];
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <main+0x160>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <main+0x168>)
 8000f68:	6053      	str	r3, [r2, #4]
	  		a[2] = estimator.Theta_.pData[2];
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <main+0x160>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <main+0x168>)
 8000f72:	6093      	str	r3, [r2, #8]
	  		a[3] = estimator.Theta_.pData[3];
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <main+0x160>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <main+0x168>)
 8000f7c:	60d3      	str	r3, [r2, #12]
	  		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <main+0x120>)
 8000f84:	f001 fe0d 	bl	8002ba2 <HAL_GPIO_TogglePin>
	  		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, u_motor);
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <main+0x16c>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	4907      	ldr	r1, [pc, #28]	@ (8000fac <main+0x128>)
 8000f90:	680c      	ldr	r4, [r1, #0]
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fce5 	bl	8000964 <__aeabi_d2uiz>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6363      	str	r3, [r4, #52]	@ 0x34
  {
 8000f9e:	bf00      	nop
 8000fa0:	e7c2      	b.n	8000f28 <main+0xa4>
 8000fa2:	bf00      	nop
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	2000007c 	.word	0x2000007c
 8000fac:	200000c4 	.word	0x200000c4
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	2000016c 	.word	0x2000016c
 8000fb8:	2000010c 	.word	0x2000010c
 8000fbc:	4479c000 	.word	0x4479c000
 8000fc0:	451c4000 	.word	0x451c4000
 8000fc4:	00000000 	.word	0x00000000
 8000fc8:	38d1b717 	.word	0x38d1b717
 8000fcc:	20000180 	.word	0x20000180
 8000fd0:	3dcccccd 	.word	0x3dcccccd
 8000fd4:	200001a0 	.word	0x200001a0
 8000fd8:	08005960 	.word	0x08005960
 8000fdc:	42c80000 	.word	0x42c80000
 8000fe0:	3f4ccccd 	.word	0x3f4ccccd
 8000fe4:	200001b0 	.word	0x200001b0
 8000fe8:	20000158 	.word	0x20000158
 8000fec:	200001e0 	.word	0x200001e0
 8000ff0:	20000178 	.word	0x20000178

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	@ 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	@ 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fc3a 	bl	800587c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <SystemClock_Config+0xcc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <SystemClock_Config+0xcc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <SystemClock_Config+0xd0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <SystemClock_Config+0xd0>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001050:	2301      	movs	r3, #1
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001054:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001064:	2304      	movs	r3, #4
 8001066:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001068:	23a8      	movs	r3, #168	@ 0xa8
 800106a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001070:	2307      	movs	r3, #7
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fdad 	bl	8002bd8 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001084:	f000 fbee 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001094:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2105      	movs	r1, #5
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 f80e 	bl	80030c8 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b2:	f000 fbd7 	bl	8001864 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	@ 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_TIM1_Init+0x98>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001164 <MX_TIM1_Init+0x9c>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_TIM1_Init+0x98>)
 80010ec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_TIM1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_TIM1_Init+0x98>)
 80010fa:	2263      	movs	r2, #99	@ 0x63
 80010fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_TIM1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_TIM1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_TIM1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001110:	4813      	ldr	r0, [pc, #76]	@ (8001160 <MX_TIM1_Init+0x98>)
 8001112:	f002 f9f9 	bl	8003508 <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800111c:	f000 fba2 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <MX_TIM1_Init+0x98>)
 800112e:	f002 feb3 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001138:	f000 fb94 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_TIM1_Init+0x98>)
 800114a:	f003 fab1 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001154:	f000 fb86 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000034 	.word	0x20000034
 8001164:	40010000 	.word	0x40010000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	@ 0x30
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2224      	movs	r2, #36	@ 0x24
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fb80 	bl	800587c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_TIM2_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <MX_TIM2_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM2_Init+0xa4>)
 800119a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ac:	2303      	movs	r3, #3
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011d8:	f002 fb78 	bl	80038cc <HAL_TIM_Encoder_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011e2:	f000 fb3f 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM2_Init+0xa4>)
 80011f4:	f003 fa5c 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80011fe:	f000 fb31 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000007c 	.word	0x2000007c

08001210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001240:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001242:	4a2d      	ldr	r2, [pc, #180]	@ (80012f8 <MX_TIM3_Init+0xe8>)
 8001244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001246:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001248:	2207      	movs	r2, #7
 800124a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001254:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001258:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001266:	4823      	ldr	r0, [pc, #140]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001268:	f002 f94e 	bl	8003508 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001272:	f000 faf7 	bl	8001864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481c      	ldr	r0, [pc, #112]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001284:	f002 fe08 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800128e:	f000 fae9 	bl	8001864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001292:	4818      	ldr	r0, [pc, #96]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 8001294:	f002 f9f8 	bl	8003688 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800129e:	f000 fae1 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 80012b2:	f003 f9fd 	bl	80046b0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012bc:	f000 fad2 	bl	8001864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	@ 0x60
 80012c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80012c4:	230a      	movs	r3, #10
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 80012d8:	f002 fd1c 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012e2:	f000 fabf 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e6:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <MX_TIM3_Init+0xe4>)
 80012e8:	f000 fdb4 	bl	8001e54 <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3738      	adds	r7, #56	@ 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000c4 	.word	0x200000c4
 80012f8:	40000400 	.word	0x40000400

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f003 fa4c 	bl	80047d0 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 fa91 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000010c 	.word	0x2000010c
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b9b      	ldr	r3, [pc, #620]	@ (80015d8 <MX_GPIO_Init+0x288>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a9a      	ldr	r2, [pc, #616]	@ (80015d8 <MX_GPIO_Init+0x288>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b98      	ldr	r3, [pc, #608]	@ (80015d8 <MX_GPIO_Init+0x288>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	4b94      	ldr	r3, [pc, #592]	@ (80015d8 <MX_GPIO_Init+0x288>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a93      	ldr	r2, [pc, #588]	@ (80015d8 <MX_GPIO_Init+0x288>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b91      	ldr	r3, [pc, #580]	@ (80015d8 <MX_GPIO_Init+0x288>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b8d      	ldr	r3, [pc, #564]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a8c      	ldr	r2, [pc, #560]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b8a      	ldr	r3, [pc, #552]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b86      	ldr	r3, [pc, #536]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a85      	ldr	r2, [pc, #532]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b83      	ldr	r3, [pc, #524]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b7f      	ldr	r3, [pc, #508]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a7e      	ldr	r2, [pc, #504]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b7c      	ldr	r3, [pc, #496]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b78      	ldr	r3, [pc, #480]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a77      	ldr	r2, [pc, #476]	@ (80015d8 <MX_GPIO_Init+0x288>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b75      	ldr	r3, [pc, #468]	@ (80015d8 <MX_GPIO_Init+0x288>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2108      	movs	r1, #8
 8001412:	4872      	ldr	r0, [pc, #456]	@ (80015dc <MX_GPIO_Init+0x28c>)
 8001414:	f001 fbac 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2101      	movs	r1, #1
 800141c:	4870      	ldr	r0, [pc, #448]	@ (80015e0 <MX_GPIO_Init+0x290>)
 800141e:	f001 fba7 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001422:	2200      	movs	r2, #0
 8001424:	f24f 011b 	movw	r1, #61467	@ 0xf01b
 8001428:	486e      	ldr	r0, [pc, #440]	@ (80015e4 <MX_GPIO_Init+0x294>)
 800142a:	f001 fba1 	bl	8002b70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800142e:	2308      	movs	r3, #8
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4865      	ldr	r0, [pc, #404]	@ (80015dc <MX_GPIO_Init+0x28c>)
 8001446:	f001 f9f7 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	485f      	ldr	r0, [pc, #380]	@ (80015e0 <MX_GPIO_Init+0x290>)
 8001462:	f001 f9e9 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001466:	2308      	movs	r3, #8
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001476:	2305      	movs	r3, #5
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4857      	ldr	r0, [pc, #348]	@ (80015e0 <MX_GPIO_Init+0x290>)
 8001482:	f001 f9d9 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001486:	2310      	movs	r3, #16
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001496:	2306      	movs	r3, #6
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	4851      	ldr	r0, [pc, #324]	@ (80015e8 <MX_GPIO_Init+0x298>)
 80014a2:	f001 f9c9 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014a6:	23e0      	movs	r3, #224	@ 0xe0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4849      	ldr	r0, [pc, #292]	@ (80015e8 <MX_GPIO_Init+0x298>)
 80014c2:	f001 f9b9 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014c6:	2304      	movs	r3, #4
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4844      	ldr	r0, [pc, #272]	@ (80015ec <MX_GPIO_Init+0x29c>)
 80014da:	f001 f9ad 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f0:	2305      	movs	r3, #5
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	483c      	ldr	r0, [pc, #240]	@ (80015ec <MX_GPIO_Init+0x29c>)
 80014fc:	f001 f99c 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD1 PD3 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001500:	f24f 031b 	movw	r3, #61467	@ 0xf01b
 8001504:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4832      	ldr	r0, [pc, #200]	@ (80015e4 <MX_GPIO_Init+0x294>)
 800151a:	f001 f98d 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800151e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001530:	2306      	movs	r3, #6
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4829      	ldr	r0, [pc, #164]	@ (80015e0 <MX_GPIO_Init+0x290>)
 800153c:	f001 f97c 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4824      	ldr	r0, [pc, #144]	@ (80015e8 <MX_GPIO_Init+0x298>)
 8001556:	f001 f96f 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800155a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800156c:	230a      	movs	r3, #10
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	481c      	ldr	r0, [pc, #112]	@ (80015e8 <MX_GPIO_Init+0x298>)
 8001578:	f001 f95e 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4815      	ldr	r0, [pc, #84]	@ (80015e4 <MX_GPIO_Init+0x294>)
 8001590:	f001 f952 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001594:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a6:	2304      	movs	r3, #4
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	480e      	ldr	r0, [pc, #56]	@ (80015ec <MX_GPIO_Init+0x29c>)
 80015b2:	f001 f941 	bl	8002838 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_GPIO_Init+0x28c>)
 80015cc:	f001 f934 	bl	8002838 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80015d0:	bf00      	nop
 80015d2:	3730      	adds	r7, #48	@ 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a72      	ldr	r2, [pc, #456]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	f040 80d8 	bne.w	80017b4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		encoder = (int32_t)__HAL_TIM_GET_COUNTER(&htim2);
 8001604:	4b71      	ldr	r3, [pc, #452]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	461a      	mov	r2, r3
 800160c:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800160e:	601a      	str	r2, [r3, #0]
		motor_omega = encoder*PI/(total_pulse*Ts);
 8001610:	4b6f      	ldr	r3, [pc, #444]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff29 	bl	800046c <__aeabi_i2d>
 800161a:	a369      	add	r3, pc, #420	@ (adr r3, 80017c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe ff8e 	bl	8000540 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
 800162c:	eddf 7a69 	vldr	s15, [pc, #420]	@ 80017d4 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017d8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ff26 	bl	8000490 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7ff f8a2 	bl	8000794 <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4961      	ldr	r1, [pc, #388]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
		motor_omega = KalmanFilter_Update(&vel_filter, motor_omega);
 800165a:	4b60      	ldr	r3, [pc, #384]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff f99e 	bl	80009a4 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	ee00 3a10 	vmov	s0, r3
 800166e:	485c      	ldr	r0, [pc, #368]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001670:	f7ff fb9c 	bl	8000dac <KalmanFilter_Update>
 8001674:	ee10 3a10 	vmov	r3, s0
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff09 	bl	8000490 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4956      	ldr	r1, [pc, #344]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001684:	e9c1 2300 	strd	r2, r3, [r1]
		motor_rpm = motor_omega*60/PI;
 8001688:	4b54      	ldr	r3, [pc, #336]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800168a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b54      	ldr	r3, [pc, #336]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001694:	f7fe ff54 	bl	8000540 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	a347      	add	r3, pc, #284	@ (adr r3, 80017c0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7ff f875 	bl	8000794 <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	494e      	ldr	r1, [pc, #312]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016b0:	e9c1 2300 	strd	r2, r3, [r1]
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
		PID_Compute(&pid, u_motor, motor_rpm);
 80016bc:	4b4b      	ldr	r3, [pc, #300]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f96d 	bl	80009a4 <__aeabi_d2f>
 80016ca:	4604      	mov	r4, r0
 80016cc:	4b46      	ldr	r3, [pc, #280]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f965 	bl	80009a4 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	ee00 3a90 	vmov	s1, r3
 80016e0:	ee00 4a10 	vmov	s0, r4
 80016e4:	4842      	ldr	r0, [pc, #264]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016e6:	f000 f8ee 	bl	80018c6 <PID_Compute>
		ouput_duty = (uint16_t)(pid.output);
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80016f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f4:	ee17 3a90 	vmov	r3, s15
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80016fc:	801a      	strh	r2, [r3, #0]

		if(ouput_duty >0){
 80016fe:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_TIM_PeriodElapsedCallback+0x15a>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2101      	movs	r1, #1
 800170c:	483a      	ldr	r0, [pc, #232]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800170e:	f001 fa2f 	bl	8002b70 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	4838      	ldr	r0, [pc, #224]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001718:	f001 fa2a 	bl	8002b70 <HAL_GPIO_WritePin>
			 uint16_t duty = (uint16_t)fminf(fabsf(pid.output), 999);
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800171e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001722:	eef0 7ae7 	vabs.f32	s15, s15
 8001726:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80017fc <HAL_TIM_PeriodElapsedCallback+0x20c>
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f004 f8d1 	bl	80058d4 <fminf>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173a:	ee17 3a90 	vmov	r3, s15
 800173e:	81bb      	strh	r3, [r7, #12]
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8001740:	4b2f      	ldr	r3, [pc, #188]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	89ba      	ldrh	r2, [r7, #12]
 8001746:	635a      	str	r2, [r3, #52]	@ 0x34
 8001748:	e01f      	b.n	800178a <HAL_TIM_PeriodElapsedCallback+0x19a>
		} else {
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	2101      	movs	r1, #1
 800174e:	482a      	ldr	r0, [pc, #168]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001750:	f001 fa0e 	bl	8002b70 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2102      	movs	r1, #2
 8001758:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800175a:	f001 fa09 	bl	8002b70 <HAL_GPIO_WritePin>
			 uint16_t duty = (uint16_t)fminf(fabsf(pid.output), 999);
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001760:	edd3 7a05 	vldr	s15, [r3, #20]
 8001764:	eef0 7ae7 	vabs.f32	s15, s15
 8001768:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80017fc <HAL_TIM_PeriodElapsedCallback+0x20c>
 800176c:	eeb0 0a67 	vmov.f32	s0, s15
 8001770:	f004 f8b0 	bl	80058d4 <fminf>
 8001774:	eef0 7a40 	vmov.f32	s15, s0
 8001778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177c:	ee17 3a90 	vmov	r3, s15
 8001780:	81fb      	strh	r3, [r7, #14]
			 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8001782:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	89fa      	ldrh	r2, [r7, #14]
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
		}
   	    sendDataUART(motor_rpm,ouput_duty);
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f906 	bl	80009a4 <__aeabi_d2f>
 8001798:	4602      	mov	r2, r0
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	eef0 0a67 	vmov.f32	s1, s15
 80017ac:	ee00 2a10 	vmov	s0, r2
 80017b0:	f7ff fb48 	bl	8000e44 <sendDataUART>
	}

}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdb0      	pop	{r4, r5, r7, pc}
 80017bc:	f3af 8000 	nop.w
 80017c0:	54442d18 	.word	0x54442d18
 80017c4:	400921fb 	.word	0x400921fb
 80017c8:	40010000 	.word	0x40010000
 80017cc:	2000007c 	.word	0x2000007c
 80017d0:	20000154 	.word	0x20000154
 80017d4:	00000184 	.word	0x00000184
 80017d8:	3ba3d70a 	.word	0x3ba3d70a
 80017dc:	20000158 	.word	0x20000158
 80017e0:	200001a0 	.word	0x200001a0
 80017e4:	404e0000 	.word	0x404e0000
 80017e8:	20000160 	.word	0x20000160
 80017ec:	20000178 	.word	0x20000178
 80017f0:	20000180 	.word	0x20000180
 80017f4:	200001dc 	.word	0x200001dc
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	4479c000 	.word	0x4479c000
 8001800:	200000c4 	.word	0x200000c4

08001804 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	i++;
 800180c:	4910      	ldr	r1, [pc, #64]	@ (8001850 <HAL_UART_RxCpltCallback+0x4c>)
 800180e:	6809      	ldr	r1, [r1, #0]
 8001810:	3101      	adds	r1, #1
 8001812:	480f      	ldr	r0, [pc, #60]	@ (8001850 <HAL_UART_RxCpltCallback+0x4c>)
 8001814:	6001      	str	r1, [r0, #0]
    if ((huart->Instance == USART2) && (buffer_receive[0] == 0x7E) && (buffer_receive[9] == 0x33))
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	6809      	ldr	r1, [r1, #0]
 800181a:	480e      	ldr	r0, [pc, #56]	@ (8001854 <HAL_UART_RxCpltCallback+0x50>)
 800181c:	4281      	cmp	r1, r0
 800181e:	d10e      	bne.n	800183e <HAL_UART_RxCpltCallback+0x3a>
 8001820:	490d      	ldr	r1, [pc, #52]	@ (8001858 <HAL_UART_RxCpltCallback+0x54>)
 8001822:	7809      	ldrb	r1, [r1, #0]
 8001824:	297e      	cmp	r1, #126	@ 0x7e
 8001826:	d10a      	bne.n	800183e <HAL_UART_RxCpltCallback+0x3a>
 8001828:	490b      	ldr	r1, [pc, #44]	@ (8001858 <HAL_UART_RxCpltCallback+0x54>)
 800182a:	7a49      	ldrb	r1, [r1, #9]
 800182c:	2933      	cmp	r1, #51	@ 0x33
 800182e:	d106      	bne.n	800183e <HAL_UART_RxCpltCallback+0x3a>
    {
        memcpy(&duty_cycle, &buffer_receive[1], 8);
 8001830:	4909      	ldr	r1, [pc, #36]	@ (8001858 <HAL_UART_RxCpltCallback+0x54>)
 8001832:	3101      	adds	r1, #1
 8001834:	680a      	ldr	r2, [r1, #0]
 8001836:	684b      	ldr	r3, [r1, #4]
 8001838:	4908      	ldr	r1, [pc, #32]	@ (800185c <HAL_UART_RxCpltCallback+0x58>)
 800183a:	e9c1 2300 	strd	r2, r3, [r1]
    }

    HAL_UART_Receive_IT(&huart2, buffer_receive, 10);
 800183e:	220a      	movs	r2, #10
 8001840:	4905      	ldr	r1, [pc, #20]	@ (8001858 <HAL_UART_RxCpltCallback+0x54>)
 8001842:	4807      	ldr	r0, [pc, #28]	@ (8001860 <HAL_UART_RxCpltCallback+0x5c>)
 8001844:	f003 f89f 	bl	8004986 <HAL_UART_Receive_IT>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000168 	.word	0x20000168
 8001854:	40004400 	.word	0x40004400
 8001858:	2000016c 	.word	0x2000016c
 800185c:	20000000 	.word	0x20000000
 8001860:	2000010c 	.word	0x2000010c

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <PID_Init>:
#include "pid_controller.h"

void PID_Init(PID_Controller  *pid, float kp, float ki, float kd,float Ts, float output_max){
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6178      	str	r0, [r7, #20]
 8001878:	ed87 0a04 	vstr	s0, [r7, #16]
 800187c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001880:	ed87 1a02 	vstr	s2, [r7, #8]
 8001884:	edc7 1a01 	vstr	s3, [r7, #4]
 8001888:	ed87 2a00 	vstr	s4, [r7]
	pid->Kp = kp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]
	pid->Ki = ki;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
	pid->Kd = kd;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	609a      	str	r2, [r3, #8]
	pid->Ts = Ts;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	61da      	str	r2, [r3, #28]
	pid->output_max = output_max;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	619a      	str	r2, [r3, #24]
	pid->last_error = 0.0f;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
	pid->intergal = 0.0f;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PID_Compute>:

float PID_Compute(PID_Controller *pid, float setpoint, float feedback){
 80018c6:	b480      	push	{r7}
 80018c8:	b087      	sub	sp, #28
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80018d2:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - feedback;
 80018d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80018da:	edd7 7a01 	vldr	s15, [r7, #4]
 80018de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e2:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->intergal += (error)*pid->Ts;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 6a07 	vldr	s13, [r3, #28]
 80018f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	edc3 7a04 	vstr	s15, [r3, #16]
	if(pid->intergal > pid->output_max/pid->Ki){
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	ed93 7a04 	vldr	s14, [r3, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ed93 6a06 	vldr	s12, [r3, #24]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edd3 6a01 	vldr	s13, [r3, #4]
 8001916:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800191a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001922:	dd0b      	ble.n	800193c <PID_Compute+0x76>
		pid->intergal = pid->output_max/pid->Ki;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	edd3 6a06 	vldr	s13, [r3, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	edc3 7a04 	vstr	s15, [r3, #16]
 800193a:	e01e      	b.n	800197a <PID_Compute+0xb4>
	}
	else if(pid->intergal < -pid->output_max/pid->Ki){
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	edd3 7a06 	vldr	s15, [r3, #24]
 8001948:	eeb1 6a67 	vneg.f32	s12, s15
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001952:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d50c      	bpl.n	800197a <PID_Compute+0xb4>
		pid->intergal = -pid->output_max/pid->Ki;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	edd3 7a06 	vldr	s15, [r3, #24]
 8001966:	eef1 6a67 	vneg.f32	s13, s15
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	float derivative = (error - pid->last_error)/(pid->Ts);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001980:	ed97 7a05 	vldr	s14, [r7, #20]
 8001984:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	ed93 7a07 	vldr	s14, [r3, #28]
 800198e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001992:	edc7 7a04 	vstr	s15, [r7, #16]

	pid->output = (pid->Kp * error) + (pid->Ki * pid->intergal) + (pid->Kd * derivative);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80019be:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->output > pid->output_max) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	dd04      	ble.n	80019f0 <PID_Compute+0x12a>
		pid->output = pid->output_max;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	615a      	str	r2, [r3, #20]
 80019ee:	e014      	b.n	8001a1a <PID_Compute+0x154>
	} else if (pid->output < -pid->output_max) {
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80019fc:	eef1 7a67 	vneg.f32	s15, s15
 8001a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d507      	bpl.n	8001a1a <PID_Compute+0x154>
        pid->output = -pid->output_max;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a10:	eef1 7a67 	vneg.f32	s15, s15
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->last_error = error;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	60da      	str	r2, [r3, #12]
	return pid->output;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	ee07 3a90 	vmov	s15, r3
}
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <RLS_Init>:
static float phi_data[4];
static float temp_4[4];
static float L_data[4];
static float temp_4x4[16];

void RLS_Init(RLS_Estimator* estimator, float lamba, float* initial_Theta, float initial_P) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a44:	6079      	str	r1, [r7, #4]
 8001a46:	edc7 0a00 	vstr	s1, [r7]
    // Initialize parameter vector
	Theta_data[0] = initial_Theta[0];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001af8 <RLS_Init+0xc0>)
 8001a50:	6013      	str	r3, [r2, #0]
	Theta_data[1] = initial_Theta[1];
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <RLS_Init+0xc0>)
 8001a58:	6053      	str	r3, [r2, #4]
	Theta_data[2] = initial_Theta[2];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <RLS_Init+0xc0>)
 8001a60:	6093      	str	r3, [r2, #8]
	Theta_data[3] = initial_Theta[3];
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a24      	ldr	r2, [pc, #144]	@ (8001af8 <RLS_Init+0xc0>)
 8001a68:	60d3      	str	r3, [r2, #12]
    arm_mat_init_f32(&estimator->Theta_, NUM_PARAMS, 1, Theta_data);
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <RLS_Init+0xc0>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2104      	movs	r1, #4
 8001a72:	f000 fb87 	bl	8002184 <arm_mat_init_f32>

    for(int i=0; i<16; i++) P_data[i] = 0.0f;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e009      	b.n	8001a90 <RLS_Init+0x58>
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <RLS_Init+0xc4>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	ddf2      	ble.n	8001a7c <RLS_Init+0x44>
    for(int i=0; i<4; i++) P_data[i*5] = initial_P;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e00b      	b.n	8001ab4 <RLS_Init+0x7c>
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a15      	ldr	r2, [pc, #84]	@ (8001afc <RLS_Init+0xc4>)
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	ddf0      	ble.n	8001a9c <RLS_Init+0x64>
    arm_mat_init_f32(&estimator->P_, NUM_PARAMS, NUM_PARAMS, P_data);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f103 0008 	add.w	r0, r3, #8
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <RLS_Init+0xc4>)
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	2104      	movs	r1, #4
 8001ac6:	f000 fb5d 	bl	8002184 <arm_mat_init_f32>

    estimator->lamba = lamba;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	611a      	str	r2, [r3, #16]
    estimator->u_prev[0] = estimator->u_prev[1] = 0.0f;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	615a      	str	r2, [r3, #20]
    estimator->y_prev[0] = estimator->y_prev[1] = 0.0f;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	621a      	str	r2, [r3, #32]
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000230 	.word	0x20000230
 8001afc:	200001f0 	.word	0x200001f0

08001b00 <RLS_Update>:

void RLS_Update(RLS_Estimator* estimator, float u, float y) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09c      	sub	sp, #112	@ 0x70
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b0c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Update the perivous values of input and output
	estimator->u_prev[2] = estimator->u_prev[1];
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	61da      	str	r2, [r3, #28]
	estimator->u_prev[1] = estimator->u_prev[0];
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	619a      	str	r2, [r3, #24]
	estimator->u_prev[0] = u;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	615a      	str	r2, [r3, #20]
	estimator->y_prev[2] = estimator->y_prev[1];
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28
	estimator->y_prev[1] = estimator->y_prev[0];
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
	estimator->y_prev[0] = y;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	621a      	str	r2, [r3, #32]
	//Create regression matrix 4x1
	phi_data[0] = -estimator->y_prev[1];
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b42:	eef1 7a67 	vneg.f32	s15, s15
 8001b46:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
	phi_data[1] = -estimator->y_prev[2];
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b52:	eef1 7a67 	vneg.f32	s15, s15
 8001b56:	4b62      	ldr	r3, [pc, #392]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001b58:	edc3 7a01 	vstr	s15, [r3, #4]
	phi_data[2] = estimator->u_prev[1];
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a5f      	ldr	r2, [pc, #380]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001b62:	6093      	str	r3, [r2, #8]
	phi_data[3] = estimator->u_prev[2];
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001b6a:	60d3      	str	r3, [r2, #12]
	arm_matrix_instance_f32 phi = {NUM_PARAMS, 1, phi_data};
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce4 <RLS_Update+0x1e4>)
 8001b6e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001b72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b76:	e883 0003 	stmia.w	r3, {r0, r1}

	//1. Calculate innovation error

    float y_hat;
    arm_dot_prod_f32(estimator->Theta_.pData, phi_data, NUM_PARAMS, &y_hat);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6858      	ldr	r0, [r3, #4]
 8001b7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b82:	2204      	movs	r2, #4
 8001b84:	4956      	ldr	r1, [pc, #344]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001b86:	f000 fa6e 	bl	8002066 <arm_dot_prod_f32>
    float e = y - y_hat;
 8001b8a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001b8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    arm_matrix_instance_f32 P_phi = {NUM_PARAMS, 1, temp_4};
 8001b9a:	4a53      	ldr	r2, [pc, #332]	@ (8001ce8 <RLS_Update+0x1e8>)
 8001b9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}
    arm_mat_mult_f32(&estimator->P_, &phi, &P_phi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001bb0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fafd 	bl	80021b4 <arm_mat_mult_f32>

    float denominator;
    arm_dot_prod_f32(phi_data, P_phi.pData, NUM_PARAMS, &denominator);
 8001bba:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001bbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	4847      	ldr	r0, [pc, #284]	@ (8001ce0 <RLS_Update+0x1e0>)
 8001bc4:	f000 fa4f 	bl	8002066 <arm_dot_prod_f32>
    denominator += estimator->lamba;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bce:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    arm_scale_f32(P_phi.pData, 1.0f/denominator, L_data, NUM_PARAMS);
 8001bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001be8:	2204      	movs	r2, #4
 8001bea:	4940      	ldr	r1, [pc, #256]	@ (8001cec <RLS_Update+0x1ec>)
 8001bec:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fa66 	bl	80020c2 <arm_scale_f32>

    // 3. Update parameter estimates
    arm_matrix_instance_f32 L = {NUM_PARAMS, 1, L_data};
 8001bf6:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf0 <RLS_Update+0x1f0>)
 8001bf8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c00:	e883 0003 	stmia.w	r3, {r0, r1}
    arm_matrix_instance_f32 Theta_predict = {NUM_PARAMS, 1, temp_4};
 8001c04:	4a38      	ldr	r2, [pc, #224]	@ (8001ce8 <RLS_Update+0x1e8>)
 8001c06:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c0e:	e883 0003 	stmia.w	r3, {r0, r1}
    arm_mat_mult_f32(&L, &(arm_matrix_instance_f32){1, 1, &e}, &Theta_predict);
 8001c12:	2301      	movs	r3, #1
 8001c14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001c16:	2301      	movs	r3, #1
 8001c18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001c1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c20:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001c24:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001c28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fac1 	bl	80021b4 <arm_mat_mult_f32>
    arm_mat_add_f32(&estimator->Theta_, &Theta_predict, &estimator->Theta_);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fa67 	bl	800210e <arm_mat_add_f32>

    // 4. Update matrix
    arm_matrix_instance_f32 phi_T = {1, NUM_PARAMS, temp_4};
 8001c40:	4a2c      	ldr	r2, [pc, #176]	@ (8001cf4 <RLS_Update+0x1f4>)
 8001c42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c4a:	e883 0003 	stmia.w	r3, {r0, r1}
    arm_mat_trans_f32(&phi, &phi_T);
 8001c4e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001c52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fb96 	bl	800238a <arm_mat_trans_f32>
    float temp[4];
    arm_matrix_instance_f32 phi_T_P = {1, NUM_PARAMS, temp};
 8001c5e:	2301      	movs	r3, #1
 8001c60:	83bb      	strh	r3, [r7, #28]
 8001c62:	2304      	movs	r3, #4
 8001c64:	83fb      	strh	r3, [r7, #30]
 8001c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6a:	623b      	str	r3, [r7, #32]
    arm_mat_mult_f32(&phi_T, &estimator->P_, &phi_T_P);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f103 0108 	add.w	r1, r3, #8
 8001c72:	f107 021c 	add.w	r2, r7, #28
 8001c76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fa9a 	bl	80021b4 <arm_mat_mult_f32>
    arm_matrix_instance_f32 L_phiT = {NUM_PARAMS, NUM_PARAMS, temp_4x4};
 8001c80:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <RLS_Update+0x1f8>)
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c8a:	e883 0003 	stmia.w	r3, {r0, r1}
    arm_mat_mult_f32(&L, &phi_T_P, &L_phiT);
 8001c8e:	f107 0214 	add.w	r2, r7, #20
 8001c92:	f107 011c 	add.w	r1, r7, #28
 8001c96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fa8a 	bl	80021b4 <arm_mat_mult_f32>
    arm_mat_sub_f32(&estimator->P_, &L_phiT, &L_phiT);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	f107 0214 	add.w	r2, r7, #20
 8001ca8:	f107 0114 	add.w	r1, r7, #20
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fb31 	bl	8002314 <arm_mat_sub_f32>
    arm_mat_scale_f32(&L_phiT, 1.0f/estimator->lamba, &estimator->P_);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f103 0208 	add.w	r2, r3, #8
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4611      	mov	r1, r2
 8001ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fae9 	bl	80022a8 <arm_mat_scale_f32>


}
 8001cd6:	bf00      	nop
 8001cd8:	3770      	adds	r7, #112	@ 0x70
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000240 	.word	0x20000240
 8001ce4:	08005970 	.word	0x08005970
 8001ce8:	08005978 	.word	0x08005978
 8001cec:	20000260 	.word	0x20000260
 8001cf0:	08005980 	.word	0x08005980
 8001cf4:	08005988 	.word	0x08005988
 8001cf8:	08005990 	.word	0x08005990

08001cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_MspInit+0x4c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d3a:	2007      	movs	r0, #7
 8001d3c:	f000 fca8 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <HAL_TIM_Base_MspInit+0x70>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d116      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2019      	movs	r0, #25
 8001d80:	f000 fc91 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d84:	2019      	movs	r0, #25
 8001d86:	f000 fcaa 	bl	80026de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d8a:	e012      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_TIM_Base_MspInit+0x78>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10d      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x74>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40000400 	.word	0x40000400

08001dc8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de8:	d12b      	bne.n	8001e42 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	4a16      	ldr	r2, [pc, #88]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfa:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e22:	2303      	movs	r3, #3
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e32:	2301      	movs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e3e:	f000 fcfb 	bl	8002838 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	@ 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <HAL_TIM_MspPostInit+0x68>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d11d      	bne.n	8001eb2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a10      	ldr	r2, [pc, #64]	@ (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_TIM_MspPostInit+0x6c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e92:	2340      	movs	r3, #64	@ 0x40
 8001e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <HAL_TIM_MspPostInit+0x70>)
 8001eae:	f000 fcc3 	bl	8002838 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020800 	.word	0x40020800

08001ec8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <HAL_UART_MspInit+0x94>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d133      	bne.n	8001f52 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_UART_MspInit+0x98>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f22:	230c      	movs	r3, #12
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f32:	2307      	movs	r3, #7
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <HAL_UART_MspInit+0x9c>)
 8001f3e:	f000 fc7b 	bl	8002838 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2026      	movs	r0, #38	@ 0x26
 8001f48:	f000 fbad 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f4c:	2026      	movs	r0, #38	@ 0x26
 8001f4e:	f000 fbc6 	bl	80026de <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	@ 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40004400 	.word	0x40004400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f000 fa77 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fce:	f001 fdb1 	bl	8003b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000034 	.word	0x20000034

08001fdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <USART2_IRQHandler+0x10>)
 8001fe2:	f002 fcf5 	bl	80049d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000010c 	.word	0x2000010c

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	@ (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	@ (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	@ (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	@ (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f003 fc23 	bl	800588c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe ff1d 	bl	8000e84 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800204c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002058:	080059c0 	.word	0x080059c0
  ldr r2, =_sbss
 800205c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002060:	200002b4 	.word	0x200002b4

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>

08002066 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        uint32_t blockSize,
        float32_t * result)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary return variable */
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800207e:	e014      	b.n	80020aa <arm_dot_prod_f32+0x44>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	60fa      	str	r2, [r7, #12]
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002098:	ed97 7a04 	vldr	s14, [r7, #16]
 800209c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a0:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e7      	bne.n	8002080 <arm_dot_prod_f32+0x1a>
  }

  /* Store result in destination buffer */
  *result = sum;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <arm_scale_f32>:
void arm_scale_f32(
  const float32_t *pSrc,
        float32_t scale,
        float32_t *pDst,
        uint32_t blockSize)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b087      	sub	sp, #28
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ce:	6079      	str	r1, [r7, #4]
 80020d0:	603a      	str	r2, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON_EXPERIMENTAL) */

  while (blkCnt > 0U)
 80020d6:	e010      	b.n	80020fa <arm_scale_f32+0x38>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (*pSrc++) * scale;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1d1a      	adds	r2, r3, #4
 80020dc:	60fa      	str	r2, [r7, #12]
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1d1a      	adds	r2, r3, #4
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1eb      	bne.n	80020d8 <arm_scale_f32+0x16>
  }

}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800210e:	b480      	push	{r7}
 8002110:	b08b      	sub	sp, #44	@ 0x2c
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002140:	e013      	b.n	800216a <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	1d1a      	adds	r2, r3, #4
 8002146:	627a      	str	r2, [r7, #36]	@ 0x24
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	1d1a      	adds	r2, r3, #4
 8002150:	623a      	str	r2, [r7, #32]
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1d1a      	adds	r2, r3, #4
 800215a:	61fa      	str	r2, [r7, #28]
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	3b01      	subs	r3, #1
 8002168:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e8      	bne.n	8002142 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002170:	2300      	movs	r3, #0
 8002172:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8002174:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002178:	4618      	mov	r0, r3
 800217a:	372c      	adds	r7, #44	@ 0x2c
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	4613      	mov	r3, r2
 8002194:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	897a      	ldrh	r2, [r7, #10]
 800219a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b093      	sub	sp, #76	@ 0x4c
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	885b      	ldrh	r3, [r3, #2]
 80021e8:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f4:	8b7b      	ldrh	r3, [r7, #26]
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8002202:	8b3b      	ldrh	r3, [r7, #24]
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8002212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002214:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8002216:	8afb      	ldrh	r3, [r7, #22]
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800221a:	e017      	b.n	800224c <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	1d1a      	adds	r2, r3, #4
 8002220:	647a      	str	r2, [r7, #68]	@ 0x44
 8002222:	ed93 7a00 	vldr	s14, [r3]
 8002226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002230:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002238:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800223c:	8b3b      	ldrh	r3, [r7, #24]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002242:	4413      	add	r3, r2
 8002244:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	3b01      	subs	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e4      	bne.n	800221c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8002252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002254:	1d1a      	adds	r2, r3, #4
 8002256:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800225a:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	3b01      	subs	r3, #1
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8002262:	8b3a      	ldrh	r2, [r7, #24]
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	6a3a      	ldr	r2, [r7, #32]
 800226c:	4413      	add	r3, r2
 800226e:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ca      	bne.n	800220c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8002276:	8b3b      	ldrh	r3, [r7, #24]
 8002278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800227a:	4413      	add	r3, r2
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800227e:	8afb      	ldrh	r3, [r7, #22]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002284:	4413      	add	r3, r2
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800228e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1b1      	bne.n	80021f8 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002294:	2300      	movs	r3, #0
 8002296:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8002298:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800229c:	4618      	mov	r0, r3
 800229e:	374c      	adds	r7, #76	@ 0x4c
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b08b      	sub	sp, #44	@ 0x2c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80022b4:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	885b      	ldrh	r3, [r3, #2]
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80022d6:	e010      	b.n	80022fa <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	1d1a      	adds	r2, r3, #4
 80022e6:	623a      	str	r2, [r7, #32]
 80022e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1eb      	bne.n	80022d8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8002304:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	372c      	adds	r7, #44	@ 0x2c
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8002314:	b480      	push	{r7}
 8002316:	b08b      	sub	sp, #44	@ 0x2c
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	885b      	ldrh	r3, [r3, #2]
 800233c:	fb02 f303 	mul.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8002346:	e013      	b.n	8002370 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	627a      	str	r2, [r7, #36]	@ 0x24
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	623a      	str	r2, [r7, #32]
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	1d1a      	adds	r2, r3, #4
 8002360:	61fa      	str	r2, [r7, #28]
 8002362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002366:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3b01      	subs	r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e8      	bne.n	8002348 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8002376:	2300      	movs	r3, #0
 8002378:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800237a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800237e:	4618      	mov	r0, r3
 8002380:	372c      	adds	r7, #44	@ 0x2c
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800238a:	b480      	push	{r7}
 800238c:	b08b      	sub	sp, #44	@ 0x2c
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	885b      	ldrh	r3, [r3, #2]
 80023aa:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 80023be:	89bb      	ldrh	r3, [r7, #12]
 80023c0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 80023c2:	e00d      	b.n	80023e0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 80023d0:	89fb      	ldrh	r3, [r7, #14]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	6a3a      	ldr	r2, [r7, #32]
 80023d6:	4413      	add	r3, r2
 80023d8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b01      	subs	r3, #1
 80023de:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ee      	bne.n	80023c4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3301      	adds	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1dd      	bne.n	80023b4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80023f8:	2300      	movs	r3, #0
 80023fa:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 80023fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002400:	4618      	mov	r0, r3
 8002402:	372c      	adds	r7, #44	@ 0x2c
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <HAL_Init+0x40>)
 8002416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800241a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <HAL_Init+0x40>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	@ (800244c <HAL_Init+0x40>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f92b 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fc5c 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f943 	bl	80026fa <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800248c:	f000 f90b 	bl	80026a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	@ (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20000010 	.word	0x20000010
 80024ac:	2000000c 	.word	0x2000000c

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000010 	.word	0x20000010
 80024d4:	200002b0 	.word	0x200002b0

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200002b0 	.word	0x200002b0

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800251c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	@ (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	@ (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	@ (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	@ (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	@ 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002670:	f7ff ff8e 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	@ (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff29 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff3e 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff8e 	bl	80025e4 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5d 	bl	8002590 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff31 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffa2 	bl	800264c <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff feda 	bl	80024d8 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d008      	beq.n	8002744 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2280      	movs	r2, #128	@ 0x80
 8002736:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e052      	b.n	80027ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0216 	bic.w	r2, r2, #22
 8002752:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002762:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <HAL_DMA_Abort+0x62>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002794:	e013      	b.n	80027be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002796:	f7ff fe9f 	bl	80024d8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d90c      	bls.n	80027be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2203      	movs	r2, #3
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e015      	b.n	80027ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e4      	bne.n	8002796 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	223f      	movs	r2, #63	@ 0x3f
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d004      	beq.n	8002810 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e00c      	b.n	800282a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2205      	movs	r2, #5
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e16b      	b.n	8002b2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 815a 	bne.w	8002b26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d005      	beq.n	800288a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	2b02      	cmp	r3, #2
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d017      	beq.n	8002928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2203      	movs	r2, #3
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80b4 	beq.w	8002b26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b60      	ldr	r3, [pc, #384]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002b44 <HAL_GPIO_Init+0x30c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a5b      	ldr	r2, [pc, #364]	@ (8002b48 <HAL_GPIO_Init+0x310>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a52      	ldr	r2, [pc, #328]	@ (8002b4c <HAL_GPIO_Init+0x314>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d02b      	beq.n	8002a5e <HAL_GPIO_Init+0x226>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a51      	ldr	r2, [pc, #324]	@ (8002b50 <HAL_GPIO_Init+0x318>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d025      	beq.n	8002a5a <HAL_GPIO_Init+0x222>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a50      	ldr	r2, [pc, #320]	@ (8002b54 <HAL_GPIO_Init+0x31c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01f      	beq.n	8002a56 <HAL_GPIO_Init+0x21e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4f      	ldr	r2, [pc, #316]	@ (8002b58 <HAL_GPIO_Init+0x320>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x21a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <HAL_GPIO_Init+0x324>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x216>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4d      	ldr	r2, [pc, #308]	@ (8002b60 <HAL_GPIO_Init+0x328>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x212>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	@ (8002b64 <HAL_GPIO_Init+0x32c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	@ (8002b68 <HAL_GPIO_Init+0x330>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x20a>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00e      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e00c      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a46:	2306      	movs	r3, #6
 8002a48:	e00a      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a4a:	2305      	movs	r3, #5
 8002a4c:	e008      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a52:	2303      	movs	r3, #3
 8002a54:	e004      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_GPIO_Init+0x228>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f002 0203 	and.w	r2, r2, #3
 8002a66:	0092      	lsls	r2, r2, #2
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a70:	4935      	ldr	r1, [pc, #212]	@ (8002b48 <HAL_GPIO_Init+0x310>)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa2:	4a32      	ldr	r2, [pc, #200]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa8:	4b30      	ldr	r3, [pc, #192]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002acc:	4a27      	ldr	r2, [pc, #156]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad2:	4b26      	ldr	r3, [pc, #152]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b20:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <HAL_GPIO_Init+0x334>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b0f      	cmp	r3, #15
 8002b30:	f67f ae90 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3724      	adds	r7, #36	@ 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40021400 	.word	0x40021400
 8002b64:	40021800 	.word	0x40021800
 8002b68:	40021c00 	.word	0x40021c00
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	041a      	lsls	r2, r3, #16
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e267      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d075      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bf6:	4b88      	ldr	r3, [pc, #544]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c02:	4b85      	ldr	r3, [pc, #532]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d112      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1a:	d10b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05b      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x108>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d157      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e242      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x74>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a75      	ldr	r2, [pc, #468]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0x98>
 8002c56:	4b70      	ldr	r3, [pc, #448]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6c      	ldr	r2, [pc, #432]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xb0>
 8002c70:	4b69      	ldr	r3, [pc, #420]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a68      	ldr	r2, [pc, #416]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b66      	ldr	r3, [pc, #408]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a65      	ldr	r2, [pc, #404]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7ff fc22 	bl	80024d8 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff fc1e 	bl	80024d8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e207      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5b      	ldr	r3, [pc, #364]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xc0>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fc0e 	bl	80024d8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fc0a 	bl	80024d8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1f3      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b51      	ldr	r3, [pc, #324]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0xe8>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cee:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d06:	4b44      	ldr	r3, [pc, #272]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1c7      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4937      	ldr	r1, [pc, #220]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7ff fbc3 	bl	80024d8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7ff fbbf 	bl	80024d8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1a8      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b28      	ldr	r3, [pc, #160]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4925      	ldr	r1, [pc, #148]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <HAL_RCC_OscConfig+0x244>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff fba2 	bl	80024d8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7ff fb9e 	bl	80024d8 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e187      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d036      	beq.n	8002e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd0:	f7ff fb82 	bl	80024d8 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7ff fb7e 	bl	80024d8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e167      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_OscConfig+0x240>)
 8002dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x200>
 8002df6:	e01b      	b.n	8002e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_RCC_OscConfig+0x248>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7ff fb6b 	bl	80024d8 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	e00e      	b.n	8002e24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff fb67 	bl	80024d8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d907      	bls.n	8002e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e150      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b88      	ldr	r3, [pc, #544]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1ea      	bne.n	8002e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8097 	beq.w	8002f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b81      	ldr	r3, [pc, #516]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	4b7d      	ldr	r3, [pc, #500]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	4a7c      	ldr	r2, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6e:	4b77      	ldr	r3, [pc, #476]	@ (800304c <HAL_RCC_OscConfig+0x474>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7a:	4b74      	ldr	r3, [pc, #464]	@ (800304c <HAL_RCC_OscConfig+0x474>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a73      	ldr	r2, [pc, #460]	@ (800304c <HAL_RCC_OscConfig+0x474>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7ff fb27 	bl	80024d8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7ff fb23 	bl	80024d8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e10c      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800304c <HAL_RCC_OscConfig+0x474>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x2ea>
 8002eb4:	4b64      	ldr	r3, [pc, #400]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb8:	4a63      	ldr	r2, [pc, #396]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec0:	e01c      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x30c>
 8002eca:	4b5f      	ldr	r3, [pc, #380]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ece:	4a5e      	ldr	r2, [pc, #376]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	f043 0304 	orr.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eda:	4a5b      	ldr	r2, [pc, #364]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee2:	e00b      	b.n	8002efc <HAL_RCC_OscConfig+0x324>
 8002ee4:	4b58      	ldr	r3, [pc, #352]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee8:	4a57      	ldr	r2, [pc, #348]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef0:	4b55      	ldr	r3, [pc, #340]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef4:	4a54      	ldr	r2, [pc, #336]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f023 0304 	bic.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7ff fae8 	bl	80024d8 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7ff fae4 	bl	80024d8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0cb      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f22:	4b49      	ldr	r3, [pc, #292]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ee      	beq.n	8002f0c <HAL_RCC_OscConfig+0x334>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7ff fad2 	bl	80024d8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7ff face 	bl	80024d8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0b5      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ee      	bne.n	8002f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	4a38      	ldr	r2, [pc, #224]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80a1 	beq.w	80030b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f76:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d05c      	beq.n	800303c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d141      	bne.n	800300e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b31      	ldr	r3, [pc, #196]	@ (8003050 <HAL_RCC_OscConfig+0x478>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7ff faa2 	bl	80024d8 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f98:	f7ff fa9e 	bl	80024d8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e087      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	491b      	ldr	r1, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x478>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7ff fa77 	bl	80024d8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7ff fa73 	bl	80024d8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e05c      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x416>
 800300c:	e054      	b.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_RCC_OscConfig+0x478>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7ff fa60 	bl	80024d8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7ff fa5c 	bl	80024d8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e045      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x470>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x444>
 800303a:	e03d      	b.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e038      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x4ec>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d028      	beq.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d121      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d11a      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800308a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0cc      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b68      	ldr	r3, [pc, #416]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d90c      	bls.n	8003104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b65      	ldr	r3, [pc, #404]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a58      	ldr	r2, [pc, #352]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003126:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800313e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d044      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d119      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d003      	beq.n	8003186 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	2b03      	cmp	r3, #3
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3b      	ldr	r3, [pc, #236]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e067      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b37      	ldr	r3, [pc, #220]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4934      	ldr	r1, [pc, #208]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff f98e 	bl	80024d8 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7ff f98a 	bl	80024d8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e04f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b25      	ldr	r3, [pc, #148]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d20c      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b22      	ldr	r3, [pc, #136]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f821 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f8ee 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00
 8003284:	40023800 	.word	0x40023800
 8003288:	08005998 	.word	0x08005998
 800328c:	20000008 	.word	0x20000008
 8003290:	2000000c 	.word	0x2000000c

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003298:	b094      	sub	sp, #80	@ 0x50
 800329a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ac:	4b79      	ldr	r3, [pc, #484]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d00d      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x40>
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	f200 80e1 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x34>
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_GetSysClockFreq+0x3a>
 80032c6:	e0db      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c8:	4b73      	ldr	r3, [pc, #460]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032cc:	e0db      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ce:	4b73      	ldr	r3, [pc, #460]	@ (800349c <HAL_RCC_GetSysClockFreq+0x208>)
 80032d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d2:	e0d8      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032de:	4b6d      	ldr	r3, [pc, #436]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fe:	2300      	movs	r3, #0
 8003300:	637b      	str	r3, [r7, #52]	@ 0x34
 8003302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003306:	4622      	mov	r2, r4
 8003308:	462b      	mov	r3, r5
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0159      	lsls	r1, r3, #5
 8003314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003318:	0150      	lsls	r0, r2, #5
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4621      	mov	r1, r4
 8003320:	1a51      	subs	r1, r2, r1
 8003322:	6139      	str	r1, [r7, #16]
 8003324:	4629      	mov	r1, r5
 8003326:	eb63 0301 	sbc.w	r3, r3, r1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003338:	4659      	mov	r1, fp
 800333a:	018b      	lsls	r3, r1, #6
 800333c:	4651      	mov	r1, sl
 800333e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003342:	4651      	mov	r1, sl
 8003344:	018a      	lsls	r2, r1, #6
 8003346:	4651      	mov	r1, sl
 8003348:	ebb2 0801 	subs.w	r8, r2, r1
 800334c:	4659      	mov	r1, fp
 800334e:	eb63 0901 	sbc.w	r9, r3, r1
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003366:	4690      	mov	r8, r2
 8003368:	4699      	mov	r9, r3
 800336a:	4623      	mov	r3, r4
 800336c:	eb18 0303 	adds.w	r3, r8, r3
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	462b      	mov	r3, r5
 8003374:	eb49 0303 	adc.w	r3, r9, r3
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003386:	4629      	mov	r1, r5
 8003388:	024b      	lsls	r3, r1, #9
 800338a:	4621      	mov	r1, r4
 800338c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003390:	4621      	mov	r1, r4
 8003392:	024a      	lsls	r2, r1, #9
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800339a:	2200      	movs	r2, #0
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033a4:	f7fd fb4e 	bl	8000a44 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b0:	e058      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b2:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	2200      	movs	r2, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	4611      	mov	r1, r2
 80033be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0159      	lsls	r1, r3, #5
 80033da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033de:	0150      	lsls	r0, r2, #5
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4641      	mov	r1, r8
 80033e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003404:	ebb2 040a 	subs.w	r4, r2, sl
 8003408:	eb63 050b 	sbc.w	r5, r3, fp
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	464b      	mov	r3, r9
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800343a:	4629      	mov	r1, r5
 800343c:	028b      	lsls	r3, r1, #10
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003444:	4621      	mov	r1, r4
 8003446:	028a      	lsls	r2, r1, #10
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	61fa      	str	r2, [r7, #28]
 8003454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003458:	f7fd faf4 	bl	8000a44 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003474:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x204>)
 8003482:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003488:	4618      	mov	r0, r3
 800348a:	3750      	adds	r7, #80	@ 0x50
 800348c:	46bd      	mov	sp, r7
 800348e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400
 800349c:	007a1200 	.word	0x007a1200

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000008 	.word	0x20000008

080034b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	@ (80034dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	080059a8 	.word	0x080059a8

080034e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e4:	f7ff ffdc 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0b5b      	lsrs	r3, r3, #13
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	@ (8003504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080059a8 	.word	0x080059a8

08003508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e041      	b.n	800359e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe fc0c 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f000 fd96 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d001      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e04e      	b.n	800365e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a23      	ldr	r2, [pc, #140]	@ (800366c <HAL_TIM_Base_Start_IT+0xc4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d022      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ea:	d01d      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <HAL_TIM_Base_Start_IT+0xc8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_TIM_Base_Start_IT+0xcc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_TIM_Base_Start_IT+0xd0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <HAL_TIM_Base_Start_IT+0xd4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_TIM_Base_Start_IT+0xd8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x80>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <HAL_TIM_Base_Start_IT+0xdc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d111      	bne.n	800364c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d010      	beq.n	800365c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	e007      	b.n	800365c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40010400 	.word	0x40010400
 8003680:	40014000 	.word	0x40014000
 8003684:	40001800 	.word	0x40001800

08003688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f839 	bl	8003726 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fcd6 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_TIM_PWM_Start+0x24>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e022      	b.n	80037a6 <HAL_TIM_PWM_Start+0x6a>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d109      	bne.n	800377a <HAL_TIM_PWM_Start+0x3e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	bf14      	ite	ne
 8003772:	2301      	movne	r3, #1
 8003774:	2300      	moveq	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	e015      	b.n	80037a6 <HAL_TIM_PWM_Start+0x6a>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b08      	cmp	r3, #8
 800377e:	d109      	bne.n	8003794 <HAL_TIM_PWM_Start+0x58>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e008      	b.n	80037a6 <HAL_TIM_PWM_Start+0x6a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07c      	b.n	80038a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Start+0x82>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037bc:	e013      	b.n	80037e6 <HAL_TIM_PWM_Start+0xaa>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0x92>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_PWM_Start+0xaa>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037dc:	e003      	b.n	80037e6 <HAL_TIM_PWM_Start+0xaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 ff38 	bl	8004664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2d      	ldr	r2, [pc, #180]	@ (80038b0 <HAL_TIM_PWM_Start+0x174>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d004      	beq.n	8003808 <HAL_TIM_PWM_Start+0xcc>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	@ (80038b4 <HAL_TIM_PWM_Start+0x178>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d101      	bne.n	800380c <HAL_TIM_PWM_Start+0xd0>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_TIM_PWM_Start+0xd2>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a22      	ldr	r2, [pc, #136]	@ (80038b0 <HAL_TIM_PWM_Start+0x174>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003834:	d01d      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1f      	ldr	r2, [pc, #124]	@ (80038b8 <HAL_TIM_PWM_Start+0x17c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1d      	ldr	r2, [pc, #116]	@ (80038bc <HAL_TIM_PWM_Start+0x180>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1c      	ldr	r2, [pc, #112]	@ (80038c0 <HAL_TIM_PWM_Start+0x184>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a16      	ldr	r2, [pc, #88]	@ (80038b4 <HAL_TIM_PWM_Start+0x178>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a18      	ldr	r2, [pc, #96]	@ (80038c4 <HAL_TIM_PWM_Start+0x188>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIM_PWM_Start+0x136>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_TIM_PWM_Start+0x18c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d111      	bne.n	8003896 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b06      	cmp	r3, #6
 8003882:	d010      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003894:	e007      	b.n	80038a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40010000 	.word	0x40010000
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40001800 	.word	0x40001800

080038cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e097      	b.n	8003a10 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7fe fa67 	bl	8001dc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003910:	f023 0307 	bic.w	r3, r3, #7
 8003914:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 fba9 	bl	8004078 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394e:	f023 0303 	bic.w	r3, r3, #3
 8003952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4313      	orrs	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800396c:	f023 030c 	bic.w	r3, r3, #12
 8003970:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003978:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	4313      	orrs	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	011a      	lsls	r2, r3, #4
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	4313      	orrs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4313      	orrs	r3, r2
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d110      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a4e:	7b7b      	ldrb	r3, [r7, #13]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d001      	beq.n	8003a58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e069      	b.n	8003b2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a68:	e031      	b.n	8003ace <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d110      	bne.n	8003a92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a70:	7bbb      	ldrb	r3, [r7, #14]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a76:	7b3b      	ldrb	r3, [r7, #12]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d001      	beq.n	8003a80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e055      	b.n	8003b2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a90:	e01d      	b.n	8003ace <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d108      	bne.n	8003aaa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a9e:	7b7b      	ldrb	r3, [r7, #13]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d102      	bne.n	8003aaa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aa4:	7b3b      	ldrb	r3, [r7, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d001      	beq.n	8003aae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e03e      	b.n	8003b2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_TIM_Encoder_Start+0xc4>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d008      	beq.n	8003aec <HAL_TIM_Encoder_Start+0xd4>
 8003ada:	e00f      	b.n	8003afc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fdbd 	bl	8004664 <TIM_CCxChannelCmd>
      break;
 8003aea:	e016      	b.n	8003b1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	2104      	movs	r1, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fdb5 	bl	8004664 <TIM_CCxChannelCmd>
      break;
 8003afa:	e00e      	b.n	8003b1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2201      	movs	r2, #1
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fdad 	bl	8004664 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	2104      	movs	r1, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fda6 	bl	8004664 <TIM_CCxChannelCmd>
      break;
 8003b18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0202 	mvn.w	r2, #2
 8003b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fa5b 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa4d 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa5e 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0204 	mvn.w	r2, #4
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa35 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa27 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa38 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0208 	mvn.w	r2, #8
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2204      	movs	r2, #4
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa0f 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa01 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa12 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d020      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01b      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0210 	mvn.w	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2208      	movs	r2, #8
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f9e9 	bl	800403a <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9db 	bl	8004026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f9ec 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00c      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0201 	mvn.w	r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd fca8 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fd7c 	bl	80047bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9bd 	bl	8004062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0220 	mvn.w	r2, #32
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fd4e 	bl	80047a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fa24 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa74 	bl	80042b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fac9 	bl	800439c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fb1d 	bl	8004484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0b4      	b.n	800401e <HAL_TIM_ConfigClockSource+0x186>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eec:	d03e      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xd4>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef2:	f200 8087 	bhi.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x172>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	d87f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b70      	cmp	r3, #112	@ 0x70
 8003f06:	d01a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xa6>
 8003f08:	2b70      	cmp	r3, #112	@ 0x70
 8003f0a:	d87b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b60      	cmp	r3, #96	@ 0x60
 8003f0e:	d050      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f10:	2b60      	cmp	r3, #96	@ 0x60
 8003f12:	d877      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b50      	cmp	r3, #80	@ 0x50
 8003f16:	d03c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xfa>
 8003f18:	2b50      	cmp	r3, #80	@ 0x50
 8003f1a:	d873      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d058      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f20:	2b40      	cmp	r3, #64	@ 0x40
 8003f22:	d86f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b30      	cmp	r3, #48	@ 0x30
 8003f26:	d064      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b30      	cmp	r3, #48	@ 0x30
 8003f2a:	d86b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d060      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d867      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d05a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	e062      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	f000 fb69 	bl	8004624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      break;
 8003f6a:	e04f      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7c:	f000 fb52 	bl	8004624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f8e:	609a      	str	r2, [r3, #8]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fac6 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2150      	movs	r1, #80	@ 0x50
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fb1f 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e02c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fae5 	bl	800458e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2160      	movs	r1, #96	@ 0x60
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb0f 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e01c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 faa6 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 faff 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 faf6 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8004002:	e003      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e000      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a46      	ldr	r2, [pc, #280]	@ (80041a4 <TIM_Base_SetConfig+0x12c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004096:	d00f      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a43      	ldr	r2, [pc, #268]	@ (80041a8 <TIM_Base_SetConfig+0x130>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00b      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a42      	ldr	r2, [pc, #264]	@ (80041ac <TIM_Base_SetConfig+0x134>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a41      	ldr	r2, [pc, #260]	@ (80041b0 <TIM_Base_SetConfig+0x138>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <TIM_Base_SetConfig+0x13c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d108      	bne.n	80040ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a35      	ldr	r2, [pc, #212]	@ (80041a4 <TIM_Base_SetConfig+0x12c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d8:	d027      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a32      	ldr	r2, [pc, #200]	@ (80041a8 <TIM_Base_SetConfig+0x130>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d023      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a31      	ldr	r2, [pc, #196]	@ (80041ac <TIM_Base_SetConfig+0x134>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a30      	ldr	r2, [pc, #192]	@ (80041b0 <TIM_Base_SetConfig+0x138>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2f      	ldr	r2, [pc, #188]	@ (80041b4 <TIM_Base_SetConfig+0x13c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d017      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2e      	ldr	r2, [pc, #184]	@ (80041b8 <TIM_Base_SetConfig+0x140>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2d      	ldr	r2, [pc, #180]	@ (80041bc <TIM_Base_SetConfig+0x144>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <TIM_Base_SetConfig+0x148>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a2b      	ldr	r2, [pc, #172]	@ (80041c4 <TIM_Base_SetConfig+0x14c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2a      	ldr	r2, [pc, #168]	@ (80041c8 <TIM_Base_SetConfig+0x150>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a29      	ldr	r2, [pc, #164]	@ (80041cc <TIM_Base_SetConfig+0x154>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a10      	ldr	r2, [pc, #64]	@ (80041a4 <TIM_Base_SetConfig+0x12c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <TIM_Base_SetConfig+0x13c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d105      	bne.n	8004196 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	611a      	str	r2, [r3, #16]
  }
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40010400 	.word	0x40010400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800
 80041c4:	40001800 	.word	0x40001800
 80041c8:	40001c00 	.word	0x40001c00
 80041cc:	40002000 	.word	0x40002000

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <TIM_OC1_SetConfig+0xd8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC1_SetConfig+0x64>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ac <TIM_OC1_SetConfig+0xdc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10c      	bne.n	800424e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0308 	bic.w	r3, r3, #8
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a15      	ldr	r2, [pc, #84]	@ (80042a8 <TIM_OC1_SetConfig+0xd8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC1_SetConfig+0x8e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a14      	ldr	r2, [pc, #80]	@ (80042ac <TIM_OC1_SetConfig+0xdc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f023 0210 	bic.w	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <TIM_OC2_SetConfig+0xe4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_OC2_SetConfig+0x68>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a21      	ldr	r2, [pc, #132]	@ (8004398 <TIM_OC2_SetConfig+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10d      	bne.n	8004334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <TIM_OC2_SetConfig+0xe4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0x94>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <TIM_OC2_SetConfig+0xe8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d113      	bne.n	800436c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800434a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a21      	ldr	r2, [pc, #132]	@ (800447c <TIM_OC3_SetConfig+0xe0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC3_SetConfig+0x66>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <TIM_OC3_SetConfig+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a16      	ldr	r2, [pc, #88]	@ (800447c <TIM_OC3_SetConfig+0xe0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_OC3_SetConfig+0x92>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <TIM_OC3_SetConfig+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d113      	bne.n	8004456 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400

08004484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <TIM_OC4_SetConfig+0xa4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC4_SetConfig+0x68>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a11      	ldr	r2, [pc, #68]	@ (800452c <TIM_OC4_SetConfig+0xa8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 030a 	bic.w	r3, r3, #10
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	031b      	lsls	r3, r3, #12
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	f043 0307 	orr.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	431a      	orrs	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2201      	movs	r2, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e05a      	b.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a21      	ldr	r2, [pc, #132]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d022      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004714:	d01d      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d018      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1b      	ldr	r2, [pc, #108]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a18      	ldr	r2, [pc, #96]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10c      	bne.n	800476c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	4313      	orrs	r3, r2
 8004762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40010000 	.word	0x40010000
 8004790:	40000400 	.word	0x40000400
 8004794:	40000800 	.word	0x40000800
 8004798:	40000c00 	.word	0x40000c00
 800479c:	40010400 	.word	0x40010400
 80047a0:	40014000 	.word	0x40014000
 80047a4:	40001800 	.word	0x40001800

080047a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e042      	b.n	8004868 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fb66 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	@ 0x24
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fdbd 	bl	8005394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d175      	bne.n	800497c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit+0x2c>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e06e      	b.n	800497e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2221      	movs	r2, #33	@ 0x21
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fd fe13 	bl	80024d8 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c8:	d108      	bne.n	80048dc <HAL_UART_Transmit+0x6c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	e003      	b.n	80048e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e4:	e02e      	b.n	8004944 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2180      	movs	r1, #128	@ 0x80
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb1f 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e03a      	b.n	800497e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	3302      	adds	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	e007      	b.n	8004936 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	3301      	adds	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1cb      	bne.n	80048e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2140      	movs	r1, #64	@ 0x40
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 faeb 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e006      	b.n	800497e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800497c:	2302      	movs	r3, #2
  }
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	4613      	mov	r3, r2
 8004992:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	d112      	bne.n	80049c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_UART_Receive_IT+0x26>
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e00b      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	461a      	mov	r2, r3
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fb12 	bl	8004fe6 <UART_Start_Receive_IT>
 80049c2:	4603      	mov	r3, r0
 80049c4:	e000      	b.n	80049c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b0ba      	sub	sp, #232	@ 0xe8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fbf2 	bl	8005218 <UART_Receive_IT>
      return;
 8004a34:	e25b      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80de 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
 8004a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80d1 	beq.w	8004bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
 8004a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f043 0204 	orr.w	r2, r3, #4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0208 	orr.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 81f2 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb7d 	bl	8005218 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b40      	cmp	r3, #64	@ 0x40
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_UART_IRQHandler+0x17a>
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04f      	beq.n	8004bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa85 	bl	800505a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b40      	cmp	r3, #64	@ 0x40
 8004b5c:	d141      	bne.n	8004be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3314      	adds	r3, #20
 8004b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d013      	beq.n	8004bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8004db0 <HAL_UART_IRQHandler+0x3e0>)
 8004bb8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd fe17 	bl	80027f2 <HAL_DMA_Abort_IT>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd8:	e00e      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f994 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00a      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f990 	bl	8004f08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e006      	b.n	8004bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f98c 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bf6:	e175      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	bf00      	nop
    return;
 8004bfa:	e173      	b.n	8004ee4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	f040 814f 	bne.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8148 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8141 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	f040 80b6 	bne.w	8004db4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8145 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c66:	429a      	cmp	r2, r3
 8004c68:	f080 813e 	bcs.w	8004ee8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c7e:	f000 8088 	beq.w	8004d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1d9      	bne.n	8004c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3314      	adds	r3, #20
 8004cd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e1      	bne.n	8004cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd fcc0 	bl	8002712 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8b7 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dae:	e09b      	b.n	8004ee8 <HAL_UART_IRQHandler+0x518>
 8004db0:	08005121 	.word	0x08005121
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 808e 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8089 	beq.w	8004eec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	623b      	str	r3, [r7, #32]
   return(result);
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e3      	bne.n	8004e12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0310 	bic.w	r3, r3, #16
 8004e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e7c:	61fa      	str	r2, [r7, #28]
 8004e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e3      	bne.n	8004e58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f83d 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ea2:	e023      	b.n	8004eec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f943 	bl	8005148 <UART_Transmit_IT>
    return;
 8004ec2:	e014      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
 8004ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f983 	bl	80051e8 <UART_EndTransmit_IT>
    return;
 8004ee2:	e004      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_IRQHandler+0x51e>
      return;
 8004eec:	bf00      	nop
  }
}
 8004eee:	37e8      	adds	r7, #232	@ 0xe8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	e03b      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4c:	d037      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fd fac3 	bl	80024d8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e03a      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d023      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d020      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d01d      	beq.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d116      	bne.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f857 	bl	800505a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2208      	movs	r2, #8
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e00f      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d0b4      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2222      	movs	r2, #34	@ 0x22
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800502a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0220 	orr.w	r2, r2, #32
 800504a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800505a:	b480      	push	{r7}
 800505c:	b095      	sub	sp, #84	@ 0x54
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005082:	643a      	str	r2, [r7, #64]	@ 0x40
 8005084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e5      	bne.n	8005062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d119      	bne.n	8005106 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 0310 	bic.w	r3, r3, #16
 80050e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050f2:	61ba      	str	r2, [r7, #24]
 80050f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005114:	bf00      	nop
 8005116:	3754      	adds	r7, #84	@ 0x54
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fee4 	bl	8004f08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b21      	cmp	r3, #33	@ 0x21
 800515a:	d13e      	bne.n	80051da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005164:	d114      	bne.n	8005190 <UART_Transmit_IT+0x48>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d110      	bne.n	8005190 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005182:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]
 800518e:	e008      	b.n	80051a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	1c59      	adds	r1, r3, #1
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6211      	str	r1, [r2, #32]
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4619      	mov	r1, r3
 80051b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fe73 	bl	8004ef4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	@ 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b22      	cmp	r3, #34	@ 0x22
 800522a:	f040 80ae 	bne.w	800538a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005236:	d117      	bne.n	8005268 <UART_Receive_IT+0x50>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	b29a      	uxth	r2, r3
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28
 8005266:	e026      	b.n	80052b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800527a:	d007      	beq.n	800528c <UART_Receive_IT+0x74>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <UART_Receive_IT+0x82>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e008      	b.n	80052ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d15d      	bne.n	8005386 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0220 	bic.w	r2, r2, #32
 80052d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530c:	2b01      	cmp	r3, #1
 800530e:	d135      	bne.n	800537c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	613b      	str	r3, [r7, #16]
   return(result);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005336:	623a      	str	r2, [r7, #32]
 8005338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	69f9      	ldr	r1, [r7, #28]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	61bb      	str	r3, [r7, #24]
   return(result);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b10      	cmp	r3, #16
 8005356:	d10a      	bne.n	800536e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fdd1 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
 800537a:	e002      	b.n	8005382 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fc fa41 	bl	8001804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e002      	b.n	800538c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3730      	adds	r7, #48	@ 0x30
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005398:	b0c0      	sub	sp, #256	@ 0x100
 800539a:	af00      	add	r7, sp, #0
 800539c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b0:	68d9      	ldr	r1, [r3, #12]
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	ea40 0301 	orr.w	r3, r0, r1
 80053bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053ec:	f021 010c 	bic.w	r1, r1, #12
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053fa:	430b      	orrs	r3, r1
 80053fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	6999      	ldr	r1, [r3, #24]
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	ea40 0301 	orr.w	r3, r0, r1
 800541a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b8f      	ldr	r3, [pc, #572]	@ (8005660 <UART_SetConfig+0x2cc>)
 8005424:	429a      	cmp	r2, r3
 8005426:	d005      	beq.n	8005434 <UART_SetConfig+0xa0>
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b8d      	ldr	r3, [pc, #564]	@ (8005664 <UART_SetConfig+0x2d0>)
 8005430:	429a      	cmp	r2, r3
 8005432:	d104      	bne.n	800543e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005434:	f7fe f854 	bl	80034e0 <HAL_RCC_GetPCLK2Freq>
 8005438:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800543c:	e003      	b.n	8005446 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800543e:	f7fe f83b 	bl	80034b8 <HAL_RCC_GetPCLK1Freq>
 8005442:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005450:	f040 810c 	bne.w	800566c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005458:	2200      	movs	r2, #0
 800545a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800545e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005462:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005466:	4622      	mov	r2, r4
 8005468:	462b      	mov	r3, r5
 800546a:	1891      	adds	r1, r2, r2
 800546c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800546e:	415b      	adcs	r3, r3
 8005470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005472:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005476:	4621      	mov	r1, r4
 8005478:	eb12 0801 	adds.w	r8, r2, r1
 800547c:	4629      	mov	r1, r5
 800547e:	eb43 0901 	adc.w	r9, r3, r1
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800548e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005496:	4690      	mov	r8, r2
 8005498:	4699      	mov	r9, r3
 800549a:	4623      	mov	r3, r4
 800549c:	eb18 0303 	adds.w	r3, r8, r3
 80054a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054a4:	462b      	mov	r3, r5
 80054a6:	eb49 0303 	adc.w	r3, r9, r3
 80054aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054c2:	460b      	mov	r3, r1
 80054c4:	18db      	adds	r3, r3, r3
 80054c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c8:	4613      	mov	r3, r2
 80054ca:	eb42 0303 	adc.w	r3, r2, r3
 80054ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80054d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054d8:	f7fb fab4 	bl	8000a44 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4b61      	ldr	r3, [pc, #388]	@ (8005668 <UART_SetConfig+0x2d4>)
 80054e2:	fba3 2302 	umull	r2, r3, r3, r2
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	011c      	lsls	r4, r3, #4
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005504:	415b      	adcs	r3, r3
 8005506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005508:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800550c:	4641      	mov	r1, r8
 800550e:	eb12 0a01 	adds.w	sl, r2, r1
 8005512:	4649      	mov	r1, r9
 8005514:	eb43 0b01 	adc.w	fp, r3, r1
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005524:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005528:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800552c:	4692      	mov	sl, r2
 800552e:	469b      	mov	fp, r3
 8005530:	4643      	mov	r3, r8
 8005532:	eb1a 0303 	adds.w	r3, sl, r3
 8005536:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800553a:	464b      	mov	r3, r9
 800553c:	eb4b 0303 	adc.w	r3, fp, r3
 8005540:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005550:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005554:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005558:	460b      	mov	r3, r1
 800555a:	18db      	adds	r3, r3, r3
 800555c:	643b      	str	r3, [r7, #64]	@ 0x40
 800555e:	4613      	mov	r3, r2
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	647b      	str	r3, [r7, #68]	@ 0x44
 8005566:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800556a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800556e:	f7fb fa69 	bl	8000a44 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4611      	mov	r1, r2
 8005578:	4b3b      	ldr	r3, [pc, #236]	@ (8005668 <UART_SetConfig+0x2d4>)
 800557a:	fba3 2301 	umull	r2, r3, r3, r1
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2264      	movs	r2, #100	@ 0x64
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	1acb      	subs	r3, r1, r3
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800558e:	4b36      	ldr	r3, [pc, #216]	@ (8005668 <UART_SetConfig+0x2d4>)
 8005590:	fba3 2302 	umull	r2, r3, r3, r2
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800559c:	441c      	add	r4, r3
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055b8:	415b      	adcs	r3, r3
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055c0:	4641      	mov	r1, r8
 80055c2:	1851      	adds	r1, r2, r1
 80055c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80055c6:	4649      	mov	r1, r9
 80055c8:	414b      	adcs	r3, r1
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055d8:	4659      	mov	r1, fp
 80055da:	00cb      	lsls	r3, r1, #3
 80055dc:	4651      	mov	r1, sl
 80055de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e2:	4651      	mov	r1, sl
 80055e4:	00ca      	lsls	r2, r1, #3
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	4642      	mov	r2, r8
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f4:	464b      	mov	r3, r9
 80055f6:	460a      	mov	r2, r1
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800560c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005610:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005614:	460b      	mov	r3, r1
 8005616:	18db      	adds	r3, r3, r3
 8005618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561a:	4613      	mov	r3, r2
 800561c:	eb42 0303 	adc.w	r3, r2, r3
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005622:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005626:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800562a:	f7fb fa0b 	bl	8000a44 <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <UART_SetConfig+0x2d4>)
 8005634:	fba3 1302 	umull	r1, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	2164      	movs	r1, #100	@ 0x64
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	3332      	adds	r3, #50	@ 0x32
 8005646:	4a08      	ldr	r2, [pc, #32]	@ (8005668 <UART_SetConfig+0x2d4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f003 0207 	and.w	r2, r3, #7
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4422      	add	r2, r4
 800565a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800565c:	e106      	b.n	800586c <UART_SetConfig+0x4d8>
 800565e:	bf00      	nop
 8005660:	40011000 	.word	0x40011000
 8005664:	40011400 	.word	0x40011400
 8005668:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800566c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005676:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800567a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800567e:	4642      	mov	r2, r8
 8005680:	464b      	mov	r3, r9
 8005682:	1891      	adds	r1, r2, r2
 8005684:	6239      	str	r1, [r7, #32]
 8005686:	415b      	adcs	r3, r3
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
 800568a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800568e:	4641      	mov	r1, r8
 8005690:	1854      	adds	r4, r2, r1
 8005692:	4649      	mov	r1, r9
 8005694:	eb43 0501 	adc.w	r5, r3, r1
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	00eb      	lsls	r3, r5, #3
 80056a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a6:	00e2      	lsls	r2, r4, #3
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
 80056ac:	4643      	mov	r3, r8
 80056ae:	18e3      	adds	r3, r4, r3
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b4:	464b      	mov	r3, r9
 80056b6:	eb45 0303 	adc.w	r3, r5, r3
 80056ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056da:	4629      	mov	r1, r5
 80056dc:	008b      	lsls	r3, r1, #2
 80056de:	4621      	mov	r1, r4
 80056e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e4:	4621      	mov	r1, r4
 80056e6:	008a      	lsls	r2, r1, #2
 80056e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056ec:	f7fb f9aa 	bl	8000a44 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4b60      	ldr	r3, [pc, #384]	@ (8005878 <UART_SetConfig+0x4e4>)
 80056f6:	fba3 2302 	umull	r2, r3, r3, r2
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	011c      	lsls	r4, r3, #4
 80056fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005702:	2200      	movs	r2, #0
 8005704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005708:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800570c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005710:	4642      	mov	r2, r8
 8005712:	464b      	mov	r3, r9
 8005714:	1891      	adds	r1, r2, r2
 8005716:	61b9      	str	r1, [r7, #24]
 8005718:	415b      	adcs	r3, r3
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005720:	4641      	mov	r1, r8
 8005722:	1851      	adds	r1, r2, r1
 8005724:	6139      	str	r1, [r7, #16]
 8005726:	4649      	mov	r1, r9
 8005728:	414b      	adcs	r3, r1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005738:	4659      	mov	r1, fp
 800573a:	00cb      	lsls	r3, r1, #3
 800573c:	4651      	mov	r1, sl
 800573e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005742:	4651      	mov	r1, sl
 8005744:	00ca      	lsls	r2, r1, #3
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	4603      	mov	r3, r0
 800574c:	4642      	mov	r2, r8
 800574e:	189b      	adds	r3, r3, r2
 8005750:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005754:	464b      	mov	r3, r9
 8005756:	460a      	mov	r2, r1
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800576a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	f04f 0300 	mov.w	r3, #0
 8005774:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005778:	4649      	mov	r1, r9
 800577a:	008b      	lsls	r3, r1, #2
 800577c:	4641      	mov	r1, r8
 800577e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005782:	4641      	mov	r1, r8
 8005784:	008a      	lsls	r2, r1, #2
 8005786:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800578a:	f7fb f95b 	bl	8000a44 <__aeabi_uldivmod>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4611      	mov	r1, r2
 8005794:	4b38      	ldr	r3, [pc, #224]	@ (8005878 <UART_SetConfig+0x4e4>)
 8005796:	fba3 2301 	umull	r2, r3, r3, r1
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	2264      	movs	r2, #100	@ 0x64
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	1acb      	subs	r3, r1, r3
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	3332      	adds	r3, #50	@ 0x32
 80057a8:	4a33      	ldr	r2, [pc, #204]	@ (8005878 <UART_SetConfig+0x4e4>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b4:	441c      	add	r4, r3
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80057be:	677a      	str	r2, [r7, #116]	@ 0x74
 80057c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057c4:	4642      	mov	r2, r8
 80057c6:	464b      	mov	r3, r9
 80057c8:	1891      	adds	r1, r2, r2
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	415b      	adcs	r3, r3
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d4:	4641      	mov	r1, r8
 80057d6:	1851      	adds	r1, r2, r1
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	4649      	mov	r1, r9
 80057dc:	414b      	adcs	r3, r1
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057ec:	4659      	mov	r1, fp
 80057ee:	00cb      	lsls	r3, r1, #3
 80057f0:	4651      	mov	r1, sl
 80057f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f6:	4651      	mov	r1, sl
 80057f8:	00ca      	lsls	r2, r1, #3
 80057fa:	4610      	mov	r0, r2
 80057fc:	4619      	mov	r1, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	4642      	mov	r2, r8
 8005802:	189b      	adds	r3, r3, r2
 8005804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005806:	464b      	mov	r3, r9
 8005808:	460a      	mov	r2, r1
 800580a:	eb42 0303 	adc.w	r3, r2, r3
 800580e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	663b      	str	r3, [r7, #96]	@ 0x60
 800581a:	667a      	str	r2, [r7, #100]	@ 0x64
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005828:	4649      	mov	r1, r9
 800582a:	008b      	lsls	r3, r1, #2
 800582c:	4641      	mov	r1, r8
 800582e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005832:	4641      	mov	r1, r8
 8005834:	008a      	lsls	r2, r1, #2
 8005836:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800583a:	f7fb f903 	bl	8000a44 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <UART_SetConfig+0x4e4>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	@ 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	3332      	adds	r3, #50	@ 0x32
 8005856:	4a08      	ldr	r2, [pc, #32]	@ (8005878 <UART_SetConfig+0x4e4>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4422      	add	r2, r4
 800586a:	609a      	str	r2, [r3, #8]
}
 800586c:	bf00      	nop
 800586e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005872:	46bd      	mov	sp, r7
 8005874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005878:	51eb851f 	.word	0x51eb851f

0800587c <memset>:
 800587c:	4402      	add	r2, r0
 800587e:	4603      	mov	r3, r0
 8005880:	4293      	cmp	r3, r2
 8005882:	d100      	bne.n	8005886 <memset+0xa>
 8005884:	4770      	bx	lr
 8005886:	f803 1b01 	strb.w	r1, [r3], #1
 800588a:	e7f9      	b.n	8005880 <memset+0x4>

0800588c <__libc_init_array>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4d0d      	ldr	r5, [pc, #52]	@ (80058c4 <__libc_init_array+0x38>)
 8005890:	4c0d      	ldr	r4, [pc, #52]	@ (80058c8 <__libc_init_array+0x3c>)
 8005892:	1b64      	subs	r4, r4, r5
 8005894:	10a4      	asrs	r4, r4, #2
 8005896:	2600      	movs	r6, #0
 8005898:	42a6      	cmp	r6, r4
 800589a:	d109      	bne.n	80058b0 <__libc_init_array+0x24>
 800589c:	4d0b      	ldr	r5, [pc, #44]	@ (80058cc <__libc_init_array+0x40>)
 800589e:	4c0c      	ldr	r4, [pc, #48]	@ (80058d0 <__libc_init_array+0x44>)
 80058a0:	f000 f852 	bl	8005948 <_init>
 80058a4:	1b64      	subs	r4, r4, r5
 80058a6:	10a4      	asrs	r4, r4, #2
 80058a8:	2600      	movs	r6, #0
 80058aa:	42a6      	cmp	r6, r4
 80058ac:	d105      	bne.n	80058ba <__libc_init_array+0x2e>
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b4:	4798      	blx	r3
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7ee      	b.n	8005898 <__libc_init_array+0xc>
 80058ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80058be:	4798      	blx	r3
 80058c0:	3601      	adds	r6, #1
 80058c2:	e7f2      	b.n	80058aa <__libc_init_array+0x1e>
 80058c4:	080059b8 	.word	0x080059b8
 80058c8:	080059b8 	.word	0x080059b8
 80058cc:	080059b8 	.word	0x080059b8
 80058d0:	080059bc 	.word	0x080059bc

080058d4 <fminf>:
 80058d4:	b508      	push	{r3, lr}
 80058d6:	ed2d 8b02 	vpush	{d8}
 80058da:	eeb0 8a40 	vmov.f32	s16, s0
 80058de:	eef0 8a60 	vmov.f32	s17, s1
 80058e2:	f000 f815 	bl	8005910 <__fpclassifyf>
 80058e6:	b930      	cbnz	r0, 80058f6 <fminf+0x22>
 80058e8:	eeb0 8a68 	vmov.f32	s16, s17
 80058ec:	eeb0 0a48 	vmov.f32	s0, s16
 80058f0:	ecbd 8b02 	vpop	{d8}
 80058f4:	bd08      	pop	{r3, pc}
 80058f6:	eeb0 0a68 	vmov.f32	s0, s17
 80058fa:	f000 f809 	bl	8005910 <__fpclassifyf>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0f4      	beq.n	80058ec <fminf+0x18>
 8005902:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590a:	d5ed      	bpl.n	80058e8 <fminf+0x14>
 800590c:	e7ee      	b.n	80058ec <fminf+0x18>
	...

08005910 <__fpclassifyf>:
 8005910:	ee10 3a10 	vmov	r3, s0
 8005914:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005918:	d00d      	beq.n	8005936 <__fpclassifyf+0x26>
 800591a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800591e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005922:	d30a      	bcc.n	800593a <__fpclassifyf+0x2a>
 8005924:	4b07      	ldr	r3, [pc, #28]	@ (8005944 <__fpclassifyf+0x34>)
 8005926:	1e42      	subs	r2, r0, #1
 8005928:	429a      	cmp	r2, r3
 800592a:	d908      	bls.n	800593e <__fpclassifyf+0x2e>
 800592c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8005930:	4258      	negs	r0, r3
 8005932:	4158      	adcs	r0, r3
 8005934:	4770      	bx	lr
 8005936:	2002      	movs	r0, #2
 8005938:	4770      	bx	lr
 800593a:	2004      	movs	r0, #4
 800593c:	4770      	bx	lr
 800593e:	2003      	movs	r0, #3
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	007ffffe 	.word	0x007ffffe

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
